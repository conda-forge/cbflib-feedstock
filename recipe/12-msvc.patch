https://github.com/dials/cbflib/pull/92
https://github.com/dials/cbflib/pull/97
https://github.com/dials/cbflib/pull/98
--- a/examples/adscimg2cbf.c
+++ b/examples/adscimg2cbf.c
@@ -1,6 +1,9 @@
 #include	<stdio.h>
 
-#ifdef NO_POPEN_PROTOTYPE
+#if defined(_MSC_VER)
+#	define	pclose	_pclose
+#	define	popen	_popen
+#elif defined(NO_POPEN_PROTOTYPE)
 	/*
 	 *	This is supposed to be found in stdio.h.
 	 */
--- a/examples/arvai_test.c
+++ b/examples/arvai_test.c
@@ -13,6 +13,10 @@
 #include <stdio.h>
 #include <cbf.h>
 #include <string.h>
+#ifdef _MSC_VER
+#define pclose _pclose
+#define popen _popen
+#endif
 
 int main (int argc, char ** argv) {
 	char buf[256];
--- a/examples/cbf2adscimg.c
+++ b/examples/cbf2adscimg.c
@@ -3,6 +3,10 @@
 #include	<string.h>
 #include	<cbf.h>
 #include	<cbf_string.h>
+#ifdef _MSC_VER
+#	define pclose	_pclose
+#	define popen	_popen
+#endif
 
 /****************************************************************/
 
--- a/examples/cbf2nexus.c
+++ b/examples/cbf2nexus.c
@@ -239,7 +239,9 @@
 #include <ctype.h>
 #include <time.h>
 #include <errno.h>
+#ifdef HAVE_UNISTD_H
 #include <unistd.h>
+#endif
 #include <stdint.h>
 
 #include "cbf.h"
--- a/examples/cif2cbf.c
+++ b/examples/cif2cbf.c
@@ -473,11 +473,17 @@
 #include <time.h>
 #include <errno.h>
 #include "cbf_getopt.h"
-#include <unistd.h>
+#ifdef HAVE_UNISTD_H
+#    include <unistd.h>
+#endif
 
 #define C2CBUFSIZ 8192
 #define NUMDICTS 50
 
+#ifdef _MSC_VER
+#    define strncasecmp _strnicmp
+#endif
+
 #ifndef HAVE_MKSTEMP
 #    define mkstemp _cbf_mkstemp
 int
--- a/examples/cif2c.c
+++ b/examples/cif2c.c
@@ -303,7 +303,9 @@
 #include <time.h>
 #include <errno.h>
 #include "cbf_getopt.h"
+#ifdef HAVE_UNISTD_H
 #include <unistd.h>
+#endif
 
 #define C2CBUFSIZ 8192
 
--- a/examples/convert_image.c
+++ b/examples/convert_image.c
@@ -305,7 +305,9 @@
 #include <math.h>
 #include <errno.h>
 #include "cbf_getopt.h"
-#include <unistd.h>
+#ifdef HAVE_UNISTD_H
+#  include <unistd.h>
+#endif
 
 #ifndef HAVE_MKSTEMP
 #  define mkstemp _cbf_mkstemp
--- a/examples/convert_minicbf.c
+++ b/examples/convert_minicbf.c
@@ -315,7 +315,9 @@
 #include <math.h>
 #include <errno.h>
 #include "cbf_getopt.h"
-#include <unistd.h>
+#ifdef HAVE_UNISTD_H
+#    include <unistd.h>
+#endif
 
 #define CVTBUFSIZ 8192
 
--- a/examples/dectris_cbf_template_test/cbf_template_t.c
+++ b/examples/dectris_cbf_template_test/cbf_template_t.c
@@ -35,13 +35,16 @@
 #include <stdio.h>
 #include <string.h>
 #include <ctype.h>
-#include <unistd.h>
 #include <stdlib.h>
 #include <sys/types.h>
 #include <sys/stat.h>
 #include "mx_parms.h"
 #include "mx_cbf_t_extras.h"
 
+#ifdef _MSC_VER
+#  define strncasecmp _strnicmp
+#endif
+
 
 /*
 ** dummy functions
--- a/examples/img2cif.c
+++ b/examples/img2cif.c
@@ -290,7 +290,9 @@
 #include <ctype.h>
 #include <time.h>
 #include <errno.h>
-#include <unistd.h>
+#ifdef HAVE_UNISTD_H
+#  include <unistd.h>
+#endif
 
 #include "cbf_getopt.h"
 
--- a/examples/minicbf2nexus.c
+++ b/examples/minicbf2nexus.c
@@ -253,7 +253,9 @@
 #include <ctype.h>
 #include <time.h>
 #include <errno.h>
+#ifdef HAVE_UNISTD_H
 #include <unistd.h>
+#endif
 #ifdef CBF_USE_ULP
 #include <stdint.h>
 #endif
--- a/examples/nexus2cbf.c
+++ b/examples/nexus2cbf.c
@@ -239,7 +239,6 @@
 #include <ctype.h>
 #include <time.h>
 #include <errno.h>
-#include <unistd.h>
 #include <stdint.h>
 
 #include "cbf.h"
--- a/examples/sauter_test.C
+++ b/examples/sauter_test.C
@@ -1,3 +1,4 @@
+#include <limits>
 #include "cbf.h"
 #include "cbf_simple.h"
 #include <cstdio>
--- a/examples/sequence_match.c
+++ b/examples/sequence_match.c
@@ -34,7 +34,9 @@
 #include <time.h>
 #include <errno.h>
 #include "cbf_getopt.h"
-#include <unistd.h>
+#ifdef HAVE_UNISTD_H
+#    include <unistd.h>
+#endif
 #include <stdlib.h>
 #include <string.h>
 
--- a/examples/testcbf.c
+++ b/examples/testcbf.c
@@ -1,6 +1,6 @@
 
 #include <stdio.h>
-#include <sys/time.h>
+#include <time.h>
 
 #include "cbf.h"
 #include "cbf_tree.h"
@@ -88,7 +88,7 @@
     const char *dbname;
     int i;
     CBF_NODETYPE ntype;
-    struct timeval stv, dtv, ftv;
+    struct timespec stv, dtv, ftv;
     int dims[2];
     int fullheader = 0;
 
@@ -107,7 +107,7 @@
     long ttime;
 
 
-    gettimeofday(&stv, NULL);
+    timespec_get(&stv, TIME_UTC);
     f = fopen(name, "rb");
 
     cbf_make_handle(&ch);
@@ -182,7 +182,7 @@
 
     isreal = (isre == 1);
 
-    gettimeofday(&dtv, NULL);
+    timespec_get(&dtv, TIME_UTC);
     if (isreal) {
         double *ddata;
 
@@ -217,9 +217,9 @@
 
     cbf_free_handle(ch); /* let cbflib handle the closing of a file */
 
-    gettimeofday(&ftv, NULL);
-    dtime = (ftv.tv_sec - dtv.tv_sec)*1000 + (ftv.tv_usec - dtv.tv_usec)/1000;
-    ttime = (ftv.tv_sec - stv.tv_sec)*1000 + (ftv.tv_usec - stv.tv_usec)/1000;
+    timespec_get(&ftv, TIME_UTC);
+    dtime = (ftv.tv_sec - dtv.tv_sec)*1000 + (ftv.tv_nsec - dtv.tv_nsec)/1000000;
+    ttime = (ftv.tv_sec - stv.tv_sec)*1000 + (ftv.tv_nsec - stv.tv_nsec)/1000000;
     fprintf(stderr, "Time: %dms (%dms)\n", (int) ttime, (int) dtime);
     return (int) ttime;
 }
--- a/examples/testflat.c
+++ b/examples/testflat.c
@@ -243,7 +243,6 @@
 #include <ctype.h>
 #include <math.h>
 #include <errno.h>
-#include <unistd.h>
 
 
 int local_exit (int status);
--- a/examples/testflatpacked.c
+++ b/examples/testflatpacked.c
@@ -243,7 +243,6 @@
 #include <ctype.h>
 #include <math.h>
 #include <errno.h>
-#include <unistd.h>
 
 
 int local_exit (int status);
--- a/examples/testhdf5.c
+++ b/examples/testhdf5.c
@@ -1126,11 +1126,13 @@
 	TEST_CBF_PASS(cbf_H5Dinsert(dset,off,std,cnt,buf,val,type));
 	{/* post-conditions */
 		CBF_CALL(cbf_H5Dread2(dset,off,std,cnt,valBuf,type));
-		if (CBF_SUCCESS==error) TEST(!cmp(val,valBuf,length
+		if (CBF_SUCCESS==error) {
 #ifdef CBF_USE_ULP
-                                          ,cmp_params
+			TEST(!cmp(val,valBuf,length,cmp_params));
+#else
+			TEST(!cmp(val,valBuf,length));
 #endif
-                                          ));
+		}
 	}
     
 	return r;
--- a/examples/testreals.c
+++ b/examples/testreals.c
@@ -243,7 +243,6 @@
 #include <ctype.h>
 #include <math.h>
 #include <errno.h>
-#include <unistd.h>
 
 
 int local_exit (int status);
--- a/include/cbf.h
+++ b/include/cbf.h
@@ -1820,12 +1820,14 @@
 
 int cbf_match(const char *string, char *pattern);
 
+#ifdef CBF_USE_PYCIFRW
   /* Interpreter for dREL method expression */
 
 int cbf_drel(cbf_handle handle, cbf_handle dict, 
                                const char *mainitemname, 
                                const char *datablock, 
                                const char *expression);
+#endif
 
   /* Construct Functions dictionary */
 
--- a/include/cbf_airy_disk.h
+++ b/include/cbf_airy_disk.h
@@ -262,11 +262,19 @@
 #include <stdio.h>
 #include <math.h>
     
-#ifndef CBF_AIRY_DISK_C
-    extern const double cbf_airy_unit_disk_partvol_1D[20];
-    extern const double cbf_airy_unit_disk_partvol_2D[20][20];
+#ifdef _MSC_VER
+#    ifdef CBF_AIRY_DISK_C
+#        define CBF_AIRY_DISK_DLLSPEC __declspec(dllexport)
+#    else
+#        define CBF_AIRY_DISK_DLLSPEC __declspec(dllimport)
+#    endif
+#else
+#    define CBF_AIRY_DISK_DLLSPEC /* empty */
 #endif
 
+    CBF_AIRY_DISK_DLLSPEC extern const double cbf_airy_unit_disk_partvol_1D[20];
+    CBF_AIRY_DISK_DLLSPEC extern const double cbf_airy_unit_disk_partvol_2D[20][20];
+
 #define CBF_AIRY_UNIT_DISK_FWHM 0.8434376803
 
     
--- a/include/cbf_hdf5.h
+++ b/include/cbf_hdf5.h
@@ -837,7 +837,16 @@
      config.h
      ****************************************************************/
     
-	extern const int cbf_configError_success;
+#ifdef _MSC_VER
+#    ifdef CBF_HDF5_C
+#        define CBF_HDF5_DLLSPEC __declspec(dllexport)
+#    else
+#        define CBF_HDF5_DLLSPEC __declspec(dllimport)
+#    endif
+#else
+#    define CBF_HDF5_DLLSPEC /* empty */
+#endif
+    CBF_HDF5_DLLSPEC extern const int cbf_configError_success;
 
     /* Opaque type for a collection of configuration items */
     struct cbf_config_t;
--- a/m4/test_xds_binary.m4
+++ b/m4/test_xds_binary.m4
@@ -17,7 +17,7 @@
 	DO J = 1,1000
 	  IF (IFRAME(I,J).NE.DPREV) THEN
 	    PRINT *,"ROW ", I, ":"
-	    PRINT *,(IFRAME(I,K),K=1,1000)
+	    PRINT "(1000I7)",(IFRAME(I,K),K=1,1000)
 	    DPREV = IFRAME(I,1000)
 	    GO TO 1000
 	  ENDIF
@@ -27,4 +27,4 @@
       END IF
       STOP
       END
-'
\ No newline at end of file
+'
--- a/src/cbf.c
+++ b/src/cbf.c
@@ -268,10 +268,10 @@
     
 
 #if !defined(CBF_NO_REGEX)
-#ifdef CBF_REGEXLIB_REGEX
+#ifdef HAVE_REGEX
 #include <regex.h>
 #else
-#include <pcreposix.h>
+#include <pcre2posix.h>
 #endif
 #endif
     
--- a/src/cbf_airy_disk.c
+++ b/src/cbf_airy_disk.c
@@ -263,7 +263,7 @@
 #define CBF_ARGUMENT 4
 #endif
     
-    const double cbf_airy_unit_disk_partvol_1D[20] =
+    CBF_AIRY_DISK_DLLSPEC const double cbf_airy_unit_disk_partvol_1D[20] =
     {   1.426420856518437e-4, 0.001836262121580318,
         0.00835666373463087,  0.02443516191841331, 0.05536596434951432,
         0.1057021433691522,   0.1778607627549379,  0.2710544112372565,
@@ -272,7 +272,7 @@
         0.9446340356504864,   0.9755648380815874,  0.9916433362653698,
         0.9981637378784199,   0.9998573579143488,  1.0};
     
-    const double cbf_airy_unit_disk_partvol_2D[20][20] =
+    CBF_AIRY_DISK_DLLSPEC const double cbf_airy_unit_disk_partvol_2D[20][20] =
     {/*  0*/{0.00346705051,0.00687093888,0.01015137498,0.01325363,0.01613087439,
         0.01874602235,0.0210729779,0.02309722219,0.02481572954,0.0262362476,
         0.02737602025,0.028260067814,0.02891916459,0.029387667305,0.029701349023,
--- a/src/cbf_context.c
+++ b/src/cbf_context.c
@@ -261,7 +261,9 @@
 #include <stdlib.h>
 #include <string.h>
 #include <limits.h>
-#include <unistd.h>
+#ifdef HAVE_UNISTD_H
+  #include <unistd.h>
+#endif
 #include <fcntl.h>
 #ifdef _WIN32
   #include <direct.h>
@@ -271,6 +273,10 @@
     #include <sys/stat.h>
     #include <sys/types.h>
   #endif
+  #ifdef _MSC_VER
+    #include <sys/types.h>
+    #include <sys/stat.h>
+  #endif
 #else
   #include <errno.h>
   #include <sys/stat.h>
--- a/src/cbff.c
+++ b/src/cbff.c
@@ -261,6 +261,10 @@
 #include "cbf_simple.h"
 #include "cbff.h"
     
+#ifdef _MSC_VER
+#  define strcasecmp _stricmp
+#endif
+
     /* Return the bit pattern of a FILE * pointer as a size_t opaque
      handle */
     
--- a/src/cbf_hdf5.c
+++ b/src/cbf_hdf5.c
@@ -249,6 +249,8 @@
 
 
 
+#define CBF_HDF5_C 1
+
 #ifdef __cplusplus
 
 extern "C" {
@@ -287,14 +289,6 @@
 #define realpath _cbf_realpath
 char *
 _cbf_realpath(const char *path, char *resolved_path);
-#endif
-
-#if !defined(CBF_NO_REGEX)
-#ifdef CBF_REGEXLIB_REGEX
-#include <regex.h>
-#else
-#include <pcreposix.h>
-#endif
 #endif
 
     static int cbf_find_array_data_h5type
@@ -3606,7 +3600,7 @@
                     error |= cbf_H5Dcreate(location,&_dataset,name,0,0,0,0,H5T_IEEE_F64LE);
                     error |= cbf_H5Dwrite2(_dataset,0,0,0,&value,H5T_NATIVE_DOUBLE);
                 } else {
-                    double data = 0./0.;
+                    double data = nan("");
                     error |= cbf_H5Dread(_dataset,0,0,0,&data);
                     if (fabs(value - data)> 1.e-38+1.e-13*(fabs(value)+fabs(data))) {
                     cbf_debug_print4("Error: data doesn't match (%g vs %g) for nexus field '%s'\n",data,value,name);
@@ -3659,7 +3653,7 @@
         hid_t * dset = dataset ? dataset : &_dataset;
         found =  cbf_H5Dfind2(location,dset,name,0,0,0,H5T_IEEE_F64LE);
         if (CBF_SUCCESS==found) {
-                double data = 0./0.;
+                double data = nan("");
             error |= cbf_H5Dread2(*dset,0,0,0,&data,H5T_NATIVE_DOUBLE);
             if (cmp(&value, &data, 1)) {
                 cbf_debug_print4("data doesn't match (%g vs %g) for nexus field '%s'\n",data,value,name);
@@ -3723,7 +3717,7 @@
         hid_t * dset = dataset ? dataset : &_dataset; /* always usable */
             found =  cbf_H5Dfind2(location,dset,name,0,0,0,H5T_IEEE_F64LE);
             if (CBF_SUCCESS==found) {
-                double data = 0./0.;
+                double data = nan("");
             CBF_CALL2(cbf_H5Dread2(*dset,0,0,0,&data,H5T_NATIVE_DOUBLE),error);
                 if (cmp(&value, &data, 1, cmp_params)) {
                 cbf_debug_print4("data doesn't match (%g vs %g) for nexus field '%s'\n",data,value,name);
@@ -3992,18 +3986,18 @@
 
 
     /* Some error codes for use by the parsing functions - definitions should not be visible */
-    const int cbf_configError_success = 0;
-    const int cbf_configError_unexpectedInput = 1;
-    const int cbf_configError_expectedDelimeter = 2;
-    const int cbf_configError_expectedNumber = 3;
-    const int cbf_configError_openingFile = 4;
-    const int cbf_configError_expectedString = 5;
-    const int cbf_configError_duplicateField = 6;
-    const int cbf_configError_unexpectedEOF = 7;
-    const int cbf_configError_undefinedValue = 8;
-    const int cbf_configError_invalidDependency = 9;
-    const int cbf_configError_missingDependency = 10;
-    const int cbf_configError_loop = 11;
+    CBF_HDF5_DLLSPEC const int cbf_configError_success = 0;
+    static const int cbf_configError_unexpectedInput = 1;
+    static const int cbf_configError_expectedDelimeter = 2;
+    static const int cbf_configError_expectedNumber = 3;
+    static const int cbf_configError_openingFile = 4;
+    static const int cbf_configError_expectedString = 5;
+    static const int cbf_configError_duplicateField = 6;
+    static const int cbf_configError_unexpectedEOF = 7;
+    static const int cbf_configError_undefinedValue = 8;
+    static const int cbf_configError_invalidDependency = 9;
+    static const int cbf_configError_missingDependency = 10;
+    static const int cbf_configError_loop = 11;
 
     static int cbf_isblank (int c)
     {
@@ -4613,7 +4607,7 @@
         }
         if (CBF_SUCCESS==error) { /* vector */
             const hsize_t vdims[] = {3};
-            double buf[3] = {0./0.};
+            double buf[3] = {nan("")};
             double matrix[3][3] = {
                 {-1.,0.0,0.0},
                 {0.0,1.0,0.0},
@@ -19156,7 +19150,7 @@
                             error |= CBF_H5ERROR;
                         } else {
                             /* check rank, allowing for multiple usable results */
-                            double value = 0., factor = 0./0.;
+                            double value = 0., factor = nan("");
                             const int rank = H5Sget_simple_extent_ndims(data_space);
                             if (0==rank) {
                                 /* read the value */
@@ -19206,7 +19200,7 @@
                             error |= CBF_H5ERROR;
                         } else {
                             /* check rank, allowing for multiple usable results */
-                            double value = 0., factor = 0./0.;
+                            double value = 0., factor = nan("");
                             const int rank = H5Sget_simple_extent_ndims(data_space);
                             if (0==rank) {
                                 /* read the value */
@@ -19316,7 +19310,7 @@
                                 } else {
                                     hsize_t offset[1];
                                     hsize_t count[] = {1};
-                                    double value = 0., factor = 0./0.;
+                                    double value = 0., factor = nan("");
                                     offset[0] = dim[0]>1 ? nx->slice : 0;
                                     CBF_CALL(cbf_H5Dread2(object,offset,0,count,&value,H5T_NATIVE_DOUBLE));
                                     if (CBF_SUCCESS==error) {
@@ -19358,7 +19352,7 @@
                         } else {
                             /* check rank, allowing for multiple usable results */
                             if (0==H5Sget_simple_extent_ndims(data_space)) {
-                                double value = 0., factor = 0./0.;
+                                double value = 0., factor = nan("");
                                 CBF_CALL(cbf_H5Dread2(object,0,0,0,&value,H5T_NATIVE_DOUBLE));
                                 if (CBF_SUCCESS==error) {
                                     /* convert the data to the correct units */
@@ -19511,7 +19505,7 @@
                                 } else {
                                     hsize_t offset[1];
                                     hsize_t count[] = {1};
-                                    double value = 0., factor = 0./0.;
+                                    double value = 0., factor = nan("");
                                     offset[0] = dim[0]>1 ? nx->slice : 0;
                                     /* read the value */
                                     CBF_CALL(cbf_H5Dread2(object,offset,0,count,&value,H5T_NATIVE_DOUBLE));
@@ -19600,7 +19594,7 @@
                                 } else {
                                     hsize_t offset[1];
                                     hsize_t count[] = {1};
-                                    double value = 0., factor = 0./0.;
+                                    double value = 0., factor = nan("");
                                     offset[0] = dim[0]>1 ? nx->slice : 0;
                                     CBF_CALL(cbf_H5Dread2(object,offset,0,count,&value,H5T_NATIVE_DOUBLE));
                                     if (CBF_SUCCESS==error) {
@@ -19793,7 +19787,7 @@
                         } else {
                             /* check rank, allowing for multiple usable results */
                             if (0==H5Sget_simple_extent_ndims(data_space)) {
-                                double value = 0., factor = 0./0.;
+                                double value = 0., factor = nan("");
                                 CBF_CALL(cbf_H5Dread2(object,0,0,0,&value,H5T_NATIVE_DOUBLE));
                                 if (CBF_SUCCESS==error) {
                                     /* convert the data to the correct units */
@@ -19826,7 +19820,7 @@
                         } else {
                             /* check rank, allowing for multiple usable results */
                             if (0==H5Sget_simple_extent_ndims(data_space)) {
-                                double value = 0., factor = 0./0.;
+                                double value = 0., factor = nan("");
                                 CBF_CALL(cbf_H5Dread2(object,0,0,0,&value,H5T_NATIVE_DOUBLE));
                                 if (CBF_SUCCESS==error) {
                                     /* convert the data to the correct units */
@@ -20137,7 +20131,7 @@
                             /* check rank, allowing for multiple usable results */
                             if (0==H5Sget_simple_extent_ndims(data_space)) {
                                 hid_t units = CBF_H5FAIL;
-                                double value = 0., factor = 0./0.;
+                                double value = 0., factor = nan("");
                                 const char * unit_string = NULL;
                                 CBF_CALL(cbf_H5Dread2(object,0,0,0,&value,H5T_NATIVE_DOUBLE));
                                 CBF_CALL(cbf_H5Afind(object,&units,"units",CBF_H5FAIL,CBF_H5FAIL));
@@ -20188,7 +20182,7 @@
                             /* check rank, allowing for multiple usable results */
                             if (0==H5Sget_simple_extent_ndims(data_space)) {
                                 hid_t units = CBF_H5FAIL;
-                                double value = 0., factor = 0./0.;
+                                double value = 0., factor = nan("");
                                 const char * unit_string = NULL;
                                 CBF_CALL(cbf_H5Dread2(object,0,0,0,&value,H5T_NATIVE_DOUBLE));
                                 CBF_CALL(cbf_H5Afind(object,&units,"units",CBF_H5FAIL,CBF_H5FAIL));
@@ -20283,7 +20277,7 @@
                             /* check rank, allowing for multiple usable results */
                             if (0==H5Sget_simple_extent_ndims(data_space)) {
                                 hid_t units = CBF_H5FAIL;
-                                double value = 0., factor = 0./0.;
+                                double value = 0., factor = nan("");
                                 const char * unit_string = NULL;
                                 CBF_CALL(cbf_H5Dread2(object,0,0,0,&value,H5T_NATIVE_DOUBLE));
                                 CBF_CALL(cbf_H5Afind(object,&units,"units",CBF_H5FAIL,CBF_H5FAIL));
@@ -20779,7 +20773,7 @@
                             /* check rank, allowing for multiple usable results */
                             if (0==H5Sget_simple_extent_ndims(data_space)) {
                                 hid_t units = CBF_H5FAIL;
-                                double value = 0., factor = 0./0.;
+                                double value = 0., factor = nan("");
                                 const char * unit_string = NULL;
                                 CBF_CALL(cbf_H5Dread2(object,0,0,0,&value,H5T_NATIVE_DOUBLE));
                                 CBF_CALL(cbf_H5Afind(object,&units,"units",CBF_H5FAIL,CBF_H5FAIL));
@@ -20807,7 +20801,7 @@
                             /* check rank, allowing for multiple usable results */
                             if (0==H5Sget_simple_extent_ndims(data_space)) {
                                 hid_t units = CBF_H5FAIL;
-                                double value = 0., factor = 0./0.;
+                                double value = 0., factor = nan("");
                                 const char * unit_string = NULL;
                                 CBF_CALL(cbf_H5Dread2(object,0,0,0,&value,H5T_NATIVE_DOUBLE));
                                 CBF_CALL(cbf_H5Afind(object,&units,"units",CBF_H5FAIL,CBF_H5FAIL));
@@ -20857,7 +20851,7 @@
                             /* check rank, allowing for multiple usable results */
                             if (0==H5Sget_simple_extent_ndims(data_space)) {
                                 hid_t units = CBF_H5FAIL;
-                                double value = 0., factor = 0./0.;
+                                double value = 0., factor = nan("");
                                 const char * unit_string = NULL;
                                 CBF_CALL(cbf_H5Dread2(object,0,0,0,&value,H5T_NATIVE_DOUBLE));
                                 CBF_CALL(cbf_H5Afind(object,&units,"units",CBF_H5FAIL,CBF_H5FAIL));
@@ -20886,7 +20880,7 @@
                             /* check rank, allowing for multiple usable results */
                             if (0==H5Sget_simple_extent_ndims(data_space)) {
                                 hid_t units = CBF_H5FAIL;
-                                double value = 0., factor = 0./0.;
+                                double value = 0., factor = nan("");
                                 const char * unit_string = NULL;
                                 CBF_CALL(cbf_H5Dread2(object,0,0,0,&value,H5T_NATIVE_DOUBLE));
                                 CBF_CALL(cbf_H5Afind(object,&units,"units",CBF_H5FAIL,CBF_H5FAIL));
@@ -20915,7 +20909,7 @@
                             /* check rank, allowing for multiple usable results */
                             if (0==H5Sget_simple_extent_ndims(data_space)) {
                                 hid_t units = CBF_H5FAIL;
-                                double value = 0., factor = 0./0.;
+                                double value = 0., factor = nan("");
                                 const char * unit_string = NULL;
                                 CBF_CALL(cbf_H5Dread2(object,0,0,0,&value,H5T_NATIVE_DOUBLE));
                                 CBF_CALL(cbf_H5Afind(object,&units,"units",CBF_H5FAIL,CBF_H5FAIL));
@@ -22034,7 +22028,7 @@
                     const char * _axis_set_id[3] = {NULL, NULL,NULL}; /*< always free'able */
                     const char * axis_set_id[3]; /*< always useable */
                     hsize_t pixel_offset_dim[3];
-                    double elem_size[] = {0./0., 0./0.,0./0.};
+                    double elem_size[] = {nan(""), nan(""),nan("")};
                     int i;
                     pixel_offset_pat[0] = z_pixel_offset_pat;
                     pixel_offset_pat[1] = y_pixel_offset_pat;
@@ -22096,7 +22090,7 @@
                                     CBF_START_ARRAY(hsize_t, cnt, rank);
                                     size_t ir;
                                     double disp2[] = {0.,0.};
-                                    double factor = 0./0.;
+                                    double factor = nan("");
                                     for (ir = 0; ir < rank; ir++) { off[ir] = 0; cnt[ir] = (ir<rank-1)?1:2;}
                                     /* extract data */
                                     CBF_CALL(cbf_H5Dread2(pixel_data,off,NULL,cnt,disp2,H5T_NATIVE_DOUBLE));
@@ -22163,7 +22157,7 @@
                                 error |= CBF_H5ERROR;
                             } else if (0==rank) {
                                 double size = 0.;
-                                double factor = 0./0.;
+                                double factor = nan("");
                                 CBF_CALL(cbf_H5Dread2(pixel_data,NULL,NULL,NULL,&size,H5T_NATIVE_DOUBLE));
                                 if (CBF_SUCCESS==error) {
                                     /* convert the data to the correct units */
@@ -22944,7 +22938,7 @@
                                     CBF_CALL(cbf_H5Aread_string(units,&unit_string));
                                     if (!error) {
                                         /* need a conversion factor to apply to the offset before storing it */
-                                        double factor = 0./0.;
+                                        double factor = nan("");
                                         if (CBF_SUCCESS!=(error|=cbf_scale_units(unit_string,"mm",&factor))) {
                                             cbf_debug_print(cbf_strerror(error));
                                         } else {
@@ -24257,7 +24251,7 @@
                 } else if (!strcmp(type,"rotation")) {
                     data = c->angle_strt + (c->angle_incr+c->angle_rstrt_incr)*key->frame_number;
                 } else {
-                    data = 0./0.;
+                    data = nan("");
                 }
                 CBF_CALL(cbf_H5Dfind2(nx->hfile,&dset,key->axis.path[i],1,max,buf,H5T_IEEE_F64LE));
                 CBF_CALL(cbf_H5Dinsert(dset,off,0,cnt,buf,&data,H5T_NATIVE_DOUBLE));
@@ -27739,7 +27733,7 @@
         cbf_onfailnez(error |= cbf_rewind_datablock(handle), cbf_debug_print("CBF error: cannot find datablock.\n"));
         while (CBF_SUCCESS==error) {
             /* get some useful parameters out of the metadata as it's converted */
-            double pixel_x = 0./0., pixel_y = 0./0.;
+            double pixel_x = nan(""), pixel_y = nan("");
 
             /* then search for the 'array_data' category */
             cbf_onfailnez(cbf_find_category(handle,"array_data"),
@@ -27760,8 +27754,8 @@
                         char * token = malloc(n*sizeof(char));
                         int newline = 1;
                         /* Numerical values for use after main parsing loop */
-                        double beam_x = 0./0., beam_y = 0./0.;
-                        double detector_distance = 0./0.;
+                        double beam_x = nan(""), beam_y = nan("");
+                        double detector_distance = nan("");
                         /* Flags to determine what information I actually have */
                         /* Other useful values */
                         hid_t pilatusDiagnostics = CBF_H5FAIL; /* <- non-nexus group to dump some possibly useful information into */
@@ -28009,7 +28003,7 @@
                                 hsize_t offset[1];
                                 const hsize_t count[] = {1};
                                 hsize_t buf[] = {0};
-                                double num = 0./0.;
+                                double num = nan("");
                                 offset[0] = h5handle->slice;
                                 CBF_CALL(_cbf_scan_pilatus_V1_2_miniheader(&token, &n, &newline, 0, &value));
                                 num = strtod(token,0);
@@ -28029,7 +28023,7 @@
                                 hsize_t offset[1];
                                 const hsize_t count[] = {1};
                                 hsize_t buf[] = {0};
-                                double num = 0./0.;
+                                double num = nan("");
                                 offset[0] = h5handle->slice;
                                 CBF_CALL(_cbf_scan_pilatus_V1_2_miniheader(&token, &n, &newline, 0, &value));
                                 num = strtod(token,0);
@@ -28043,7 +28037,7 @@
                                 hid_t h5data = CBF_H5FAIL;
                                 hid_t h5location = detector;
                                 const char h5name[] = "dead_time";
-                                double num = 0./0.;
+                                double num = nan("");
                                 CBF_CALL(_cbf_scan_pilatus_V1_2_miniheader(&token, &n, &newline, 0, &value));
                                 num = strtod(token,0);
                                 CBF_CALL(CBFM_H5Drequire_scalar_F64LE2(h5location,&h5data,h5name,num,cmp_double,cmp_params));
@@ -28058,7 +28052,7 @@
                                     saturation_value = _cbf_strdup(token);
                                 }
                             } else if (!cbf_cistrcmp("Threshold_setting",token)) {
-                                double num = 0./0.;
+                                double num = nan("");
                                 hid_t h5data = CBF_H5FAIL;
                                 /* Get value & units */
                                 CBF_CALL(_cbf_scan_pilatus_V1_2_miniheader(&token, &n, &newline, 0, &value));
@@ -28085,7 +28079,7 @@
                                 hsize_t offset[1];
                                 const hsize_t count[] = {1};
                                 hsize_t buf[] = {0};
-                                double num = 0./0.;
+                                double num = nan("");
                                 offset[0] = h5handle->slice;
                                 CBF_CALL(_cbf_scan_pilatus_V1_2_miniheader(&token, &n, &newline, 0, &value));
                                 num = strtod(token,0);
@@ -28107,7 +28101,7 @@
                                 Extract x & y positions from the header, put them into the file later.
                                 I might need to read all the header to know if I can actually convert these values to NeXus data.
                                 */
-                                double num_x = 0./0., num_y = 0./0.;
+                                double num_x = nan(""), num_y = nan("");
                                 CBF_CALL(_cbf_scan_pilatus_V1_2_miniheader(&token, &n, &newline, 0, &value));
                                 num_x = strtod(token,0);
                                 CBF_CALL(_cbf_scan_pilatus_V1_2_miniheader(&token, &n, &newline, 0, &value));
@@ -28126,7 +28120,7 @@
                                 Either a number with some units or a random string, only do anything if it's a number.
                                 */
                                 const char * end = 0;
-                                double num = 0./0.;
+                                double num = nan("");
                                 CBF_CALL(_cbf_scan_pilatus_V1_2_miniheader(&token, &n, &newline, 0, &value));
                                 num = strtod(token,(char**)(&end));
                                 if (end != token && 0.0 != num) {
@@ -28337,7 +28331,7 @@
                             /* TODO: write depends_on attributes with full paths */
                             /* Common settings */
                             const hsize_t vdims[] = {3};
-                            double vbuf[3] = {0./0.};
+                            double vbuf[3] = {nan("")};
                             const hsize_t max[] = {H5S_UNLIMITED};
                             hsize_t buf[] = {0};
                             const hsize_t chunk[] = {1};
@@ -28466,7 +28460,7 @@
                     {
                         const double vector[] = {1.0, 0.0, 0.0};
                         const hsize_t vdims[] = {3};
-                        double vbuf[3] = {0./0.};
+                        double vbuf[3] = {nan("")};
                         CBF_CALL(CBFM_H5Arequire_cmp2(h5axis,"vector",1,vdims,H5T_IEEE_F64LE,H5T_NATIVE_DOUBLE,
                                                          vector,vbuf,cmp_double,cmp_params));
                     }
@@ -28523,7 +28517,7 @@
                     {
                         const double vector[] = {0.0, 1.0, 0.0};
                         const hsize_t vdims[] = {3};
-                        double vbuf[3] = {0./0.};
+                        double vbuf[3] = {nan("")};
                         CBF_CALL(CBFM_H5Arequire_cmp2(h5axis,"vector",1,vdims,H5T_IEEE_F64LE,H5T_NATIVE_DOUBLE,
                                                          vector,vbuf,cmp_double,cmp_params));
                     }
--- a/src/cbf_uncompressed.c
+++ b/src/cbf_uncompressed.c
@@ -261,6 +261,8 @@
 #if !defined(_MSC_VER)
 #define __USE_XOPEN
 #define _XOPEN_SOURCE
+#endif
+#ifdef HAVE_UNISTD_H
 #include <unistd.h>
 #endif
 
