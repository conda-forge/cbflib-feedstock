https://github.com/dials/cbflib/pull/87
https://github.com/dials/cbflib/pull/94

Need to manually remove pycbf/_pycbf.pyd on Windows.
--- a/pycbf/make_pycbf.py
+++ b/pycbf/make_pycbf.py
@@ -56,7 +56,7 @@
 
 
 # Get the ascii text as a list of strings 
-lines = open("CBFlib.txt","r").readlines()
+lines = open("CBFlib.txt","r",encoding="utf-8").readlines()
 
 # Variables to hold the useful things we find in the file
 docstring = "\n"
@@ -3406,11 +3406,11 @@
 
 
 generate_wrappers(name_dict)
-open("cbfgoniometerwrappers.i","w").write(cbf_goniometer_wrapper.get_code())
-open("cbfdetectorwrappers.i","w").write(cbf_detector_wrapper.get_code())
-open("cbfpositionerwrappers.i","w").write(cbf_positioner_wrapper.get_code())
-open("cbfhandlewrappers.i","w").write(cbf_handle_wrapper.get_code())
-open("cbfgenericwrappers.i","w").write(generic_wrapper.get_code())
+open("cbfgoniometerwrappers.i","w",encoding="utf-8").write(cbf_goniometer_wrapper.get_code())
+open("cbfdetectorwrappers.i","w",encoding="utf-8").write(cbf_detector_wrapper.get_code())
+open("cbfpositionerwrappers.i","w",encoding="utf-8").write(cbf_positioner_wrapper.get_code())
+open("cbfhandlewrappers.i","w",encoding="utf-8").write(cbf_handle_wrapper.get_code())
+open("cbfgenericwrappers.i","w",encoding="utf-8").write(generic_wrapper.get_code())
 
 print("End of output from make_pycbf.py")
 print("\\end{verbatim}")
--- a/pycbf/pycbf_test1.py
+++ b/pycbf/pycbf_test1.py
@@ -1,67 +1,64 @@
+from sys import argv
 
 import pycbf
 object = pycbf.cbf_handle_struct() # FIXME
-object.read_file(b"../img2cif_packed.cif",pycbf.MSG_DIGEST)
+object.read_file(argv[1].encode(),pycbf.MSG_DIGEST)
 object.rewind_datablock()
-print("Found",object.count_datablocks(),"blocks")
-object.select_datablock(0)
-print("Zeroth is named",object.datablock_name())
-object.rewind_category()
-categories = object.count_categories()
-for i in range(categories):
-    print("Category:",i, end=' ')
-    object.select_category(i)
-    category_name = object.category_name()
-    print("Name:",category_name, end=' ')
-    rows=object.count_rows()
-    print("Rows:",rows, end=' ')
-    cols = object.count_columns()
-    print("Cols:",cols)
-    loop=1
-    object.rewind_column()
-    while loop==1:
-        column_name = object.column_name()
-        print("column name \"",column_name,"\"", end=' ')
-        try:
-           object.next_column()
-        except:
-           break
-    print
-    for j in range(rows):
-        object.select_row(j)
+with open(argv[2],'w',newline='\n') as f:
+    print("Found",object.count_datablocks(),"blocks",file=f)
+    object.select_datablock(0)
+    print("Zeroth is named",object.datablock_name(),file=f)
+    object.rewind_category()
+    categories = object.count_categories()
+    for i in range(categories):
+        print("Category:",i, end=' ', file=f)
+        object.select_category(i)
+        category_name = object.category_name()
+        print("Name:",category_name, end=' ', file=f)
+        rows=object.count_rows()
+        print("Rows:",rows, end=' ', file=f)
+        cols = object.count_columns()
+        print("Cols:",cols,file=f)
+        loop=1
         object.rewind_column()
-        if j==0: print()
-        print("row:",j)
-        for k in range(cols):
-            name=object.column_name()
-            print("col:",name, end=' ')
-            object.select_column(k)
-            typeofvalue=object.get_typeofvalue()
-            print("type:",typeofvalue)
-            if typeofvalue.find(b"bnry") > -1:
-                print("Found the binary!!", end=' ')
-                s=object.get_integerarray_as_string()
-                print(type(str(s)))
-                print(dir(str(s)))
-                print(len(s))
-                try:
-                   import numpy 
-                   d = numpy.frombuffer(bytes(s),numpy.uint32)
-                   # Hard wired Unsigned Int32
-                   print(d.shape)
-                   print(d[0:10],d[int(d.shape[0]/2)],d[len(d)-1])
-                   print(d[int(d.shape[0]/3):int(d.shape[0]/3+20)])
-                   d=numpy.reshape(d,(2300,2300))
-#                   from matplotlib import pylab
-#                   pylab.imshow(d,vmin=0,vmax=1000)
-#                   pylab.show()
-                except ImportError:
-                   print("You need to get numpy and matplotlib to see the data")
-            else:
-                value=object.get_value()
-                print("Val:",value,i)
-    print()
-del(object)
-#
-print(dir())
-#object.free_handle(handle)
+        while loop==1:
+            column_name = object.column_name()
+            print("column name \"",column_name,"\"", end=' ', file=f)
+            try:
+               object.next_column()
+            except:
+               break
+        for j in range(rows):
+            object.select_row(j)
+            object.rewind_column()
+            if j==0: print(file=f)
+            print("row:",j,file=f)
+            for k in range(cols):
+                name=object.column_name()
+                print("col:",name, end=' ', file=f)
+                object.select_column(k)
+                typeofvalue=object.get_typeofvalue()
+                print("type:",typeofvalue,file=f)
+                if typeofvalue.find(b"bnry") > -1:
+                    s=object.get_integerarray_as_string()
+                    print(len(s), file=f)
+                    try:
+                       import numpy
+                       d = numpy.frombuffer(bytes(s),numpy.uint32)
+                       # Hard wired Unsigned Int32
+                       print(d.shape, file=f)
+                       print(d[0:10],d[int(d.shape[0]/2)],d[len(d)-1],file=f)
+                       print(d[int(d.shape[0]/3):int(d.shape[0]/3+20)], file=f)
+                       d=numpy.reshape(d,(2300,2300))
+    #                   from matplotlib import pylab
+    #                   pylab.imshow(d,vmin=0,vmax=1000)
+    #                   pylab.show()
+                    except ImportError:
+                       print("You need to get numpy and matplotlib to see the data", file=f)
+                else:
+                    value=object.get_value()
+                    print("Val:",value,i,file=f)
+        print(file=f)
+    del(object)
+    #
+    #object.free_handle(handle)
--- a/pycbf/pycbf_test2.py
+++ b/pycbf/pycbf_test2.py
@@ -1,12 +1,14 @@
+from sys import argv
 
 import pycbf
 obj = pycbf.cbf_handle_struct()
-obj.read_file(b"../adscconverted.cbf",0)
+obj.read_file(argv[1].encode(),0)
 obj.select_datablock(0)
 g = obj.construct_goniometer()
-print("Rotation axis is",g.get_rotation_axis())
-d = obj.construct_detector(0)
-print("Beam center is",d.get_beam_center())
-print("Detector slow axis is", d.get_detector_axis_slow())
-print("Detector fast axis is", d.get_detector_axis_fast())
-print("Detector axes (fast, slow) are", d.get_detector_axes_fs())
+with open(argv[2],'w',newline='\n') as f:
+    print("Rotation axis is",g.get_rotation_axis(),file=f)
+    d = obj.construct_detector(0)
+    print("Beam center is",d.get_beam_center(),file=f)
+    print("Detector slow axis is", d.get_detector_axis_slow(), file=f)
+    print("Detector fast axis is", d.get_detector_axis_fast(), file=f)
+    print("Detector axes (fast, slow) are", d.get_detector_axes_fs(), file=f)
--- a/pycbf/pycbf_test3.py
+++ b/pycbf/pycbf_test3.py
@@ -1,4 +1,3 @@
-
 import pycbf, unittest
 class GenericTests(unittest.TestCase):
 
@@ -23,4 +22,3 @@
                            24.0)
 if __name__=="__main__":
     unittest.main()
-
--- a/pycbf/pycbf_test4.py
+++ b/pycbf/pycbf_test4.py
@@ -1,102 +1,100 @@
+from sys import argv
 
 # version of pycbf_test1 with write logic added
 import pycbf
 object = pycbf.cbf_handle_struct()
 newobject = pycbf.cbf_handle_struct()
-object.read_file(b"../img2cif_packed.cif",pycbf.MSG_DIGEST)
+object.read_file(argv[1].encode(),pycbf.MSG_DIGEST)
 object.rewind_datablock()
-print("Found",object.count_datablocks(),"blocks")
-object.select_datablock(0)
-print("Zeroth is named",object.datablock_name())
-newobject.force_new_datablock(object.datablock_name());
-object.rewind_category()
-categories = object.count_categories()
-for i in range(categories):
-    print("Category:",i, end= ' ')
-    object.select_category(i)
-    category_name = object.category_name()
-    print("Name:",category_name, end=' ')
-    newobject.new_category(category_name)
-    rows=object.count_rows()
-    print("Rows:",rows, end=' ')
-    cols = object.count_columns()
-    print("Cols:",cols)
-    loop=1
-    object.rewind_column()
-    while loop==1:
-        column_name = object.column_name()
-        print("column name \"",column_name,"\"", end=' ')
-        newobject.new_column(column_name)
-        try:
-           object.next_column()
-        except:
-            break
-    print()
-    for j in range(rows):
-        object.select_row(j)
-        newobject.new_row()
+with open(argv[2],'w',newline='\n') as f:
+    print("Found",object.count_datablocks(),"blocks",file=f)
+    object.select_datablock(0)
+    print("Zeroth is named",object.datablock_name(),file=f)
+    newobject.force_new_datablock(object.datablock_name());
+    object.rewind_category()
+    categories = object.count_categories()
+    for i in range(categories):
+        print("Category:",i, end= ' ', file=f)
+        object.select_category(i)
+        category_name = object.category_name()
+        print("Name:",category_name, end=' ', file=f)
+        newobject.new_category(category_name)
+        rows=object.count_rows()
+        print("Rows:",rows, end=' ', file=f)
+        cols = object.count_columns()
+        print("Cols:",cols,file=f)
+        loop=1
         object.rewind_column()
-        print("row:",j)
-        for k in range(cols):
-            name=object.column_name()
-            print("col:",name, end=' ')
-            object.select_column(k)
-            newobject.select_column(k)
-            typeofvalue=object.get_typeofvalue()
-            print("type:",typeofvalue)
-            if typeofvalue.find(b"bnry") > -1:
-                print("Found the binary!!",end=' ')
-                s=object.get_integerarray_as_string()
-                print(type(s))
-                print(dir(s))
-                print(len(s))
-                (compression, binaryid, elsize, elsigned, \
-                    elunsigned, elements, minelement, maxelement, \
-                    byteorder,dimfast,dimmid,dimslow,padding) = \
-                    object.get_integerarrayparameters_wdims_fs()
-                if dimfast==0:
-                    dimfast = 1
-                if dimmid==0:
-                    dimmid = 1
-                if dimslow == 0:
-                    dimslow = 1
-                print("compression: ",compression)
-                print("binaryid", binaryid)
-                print("elsize", elsize)
-                print("elsigned", elsigned)
-                print("elunsigned",elunsigned)
-                print("elements", elements)
-                print("minelement", minelement)
-                print("maxelement", maxelement)
-                print("byteorder", byteorder)
-                print("dimfast", dimfast)
-                print("dimmid", dimmid)
-                print("dimslow",dimslow)
-                print("padding", padding)
-                newobject.set_integerarray_wdims_fs(\
-                  pycbf.CBF_BYTE_OFFSET,binaryid,s,elsize,elsigned,\
-                  elements,byteorder,dimfast,dimmid,dimslow,padding)
-                try:
-                   import numpy
-                   d = numpy.frombuffer(s,numpy.uint32)
-                   # Hard wired Unsigned Int32
-                   print(d.shape)
-                   print(d[0:10],d[int(d.shape[0]/2)],d[len(d)-1])
-                   print(d[int(d.shape[0]/3):int(d.shape[0]/3+20)])
-                   d=numpy.reshape(d,(2300,2300))
-#                   from matplotlib import pylab
-#                   pylab.imshow(d,vmin=0,vmax=1000)
-#                   pylab.show()
-                except ImportError:
-                   print("You need to get numpy and matplotlib to see the data")
-            else:
-                value=object.get_value()
-                newobject.set_value(value)
-                print("Val:",value,i)
-    print()
-del(object)
-newobject.write_widefile(b"newtest1.cbf",pycbf.CBF,\
-    pycbf.MIME_HEADERS|pycbf.MSG_DIGEST|pycbf.PAD_4K,0)
-#
-print(dir())
-#object.free_handle(handle)
+        while loop==1:
+            column_name = object.column_name()
+            print("column name \"",column_name,"\"", end=' ', file=f)
+            newobject.new_column(column_name)
+            try:
+               object.next_column()
+            except:
+                break
+        print(file=f)
+        for j in range(rows):
+            object.select_row(j)
+            newobject.new_row()
+            object.rewind_column()
+            print("row:",j,file=f)
+            for k in range(cols):
+                name=object.column_name()
+                print("col:",name, end=' ', file=f)
+                object.select_column(k)
+                newobject.select_column(k)
+                typeofvalue=object.get_typeofvalue()
+                print("type:",typeofvalue,file=f)
+                if typeofvalue.find(b"bnry") > -1:
+                    s=object.get_integerarray_as_string()
+                    print(len(s), file=f)
+                    (compression, binaryid, elsize, elsigned, \
+                        elunsigned, elements, minelement, maxelement, \
+                        byteorder,dimfast,dimmid,dimslow,padding) = \
+                        object.get_integerarrayparameters_wdims_fs()
+                    if dimfast==0:
+                        dimfast = 1
+                    if dimmid==0:
+                        dimmid = 1
+                    if dimslow == 0:
+                        dimslow = 1
+                    print("compression: ",compression,file=f)
+                    print("binaryid", binaryid, file=f)
+                    print("elsize", elsize, file=f)
+                    print("elsigned", elsigned, file=f)
+                    print("elunsigned",elunsigned,file=f)
+                    print("elements", elements, file=f)
+                    print("minelement", minelement, file=f)
+                    print("maxelement", maxelement, file=f)
+                    print("byteorder", byteorder, file=f)
+                    print("dimfast", dimfast, file=f)
+                    print("dimmid", dimmid, file=f)
+                    print("dimslow",dimslow,file=f)
+                    print("padding", padding, file=f)
+                    newobject.set_integerarray_wdims_fs(\
+                      pycbf.CBF_BYTE_OFFSET,binaryid,s,elsize,elsigned,\
+                      elements,byteorder,dimfast,dimmid,dimslow,padding)
+                    try:
+                       import numpy
+                       d = numpy.frombuffer(s,numpy.uint32)
+                       # Hard wired Unsigned Int32
+                       print(d.shape, file=f)
+                       print(d[0:10],d[int(d.shape[0]/2)],d[len(d)-1],file=f)
+                       print(d[int(d.shape[0]/3):int(d.shape[0]/3+20)], file=f)
+                       d=numpy.reshape(d,(2300,2300))
+    #                   from matplotlib import pylab
+    #                   pylab.imshow(d,vmin=0,vmax=1000)
+    #                   pylab.show()
+                    except ImportError:
+                       print("You need to get numpy and matplotlib to see the data", file=f)
+                else:
+                    value=object.get_value()
+                    newobject.set_value(value)
+                    print("Val:",value,i,file=f)
+        print(file=f)
+    del(object)
+    newobject.write_widefile(argv[3].encode(),pycbf.CBF,\
+        pycbf.MIME_HEADERS|pycbf.MSG_DIGEST|pycbf.PAD_4K,0)
+    #
+    #object.free_handle(handle)
--- a/pycbf/pycbf_testfelaxes.py
+++ b/pycbf/pycbf_testfelaxes.py
@@ -1,4 +1,3 @@
-
 import pycbf, sys
 from decimal import Decimal, ROUND_HALF_UP
 
@@ -7,38 +6,39 @@
 cbf = pycbf.cbf_handle_struct()
 cbf.read_widefile(image_file, pycbf.MSG_DIGEST)
 
-for element in range(64):
-    d = cbf.construct_detector(element)
-    print("element:", element)
-
-    v00 = d.get_pixel_coordinates(0, 0)
-    v01 = d.get_pixel_coordinates(0, 1)
-    v10 = d.get_pixel_coordinates(1, 0)
-    v11 = d.get_pixel_coordinates(1, 1)
-    prec = Decimal('1.000000000')
-
-    print('(0, 0) v00 [ %.9f %.9f %.9f ]' %(round(v00[0],9), round(v00[1],9), round(v00[2],9)))
-    print('(0, 1) v01 [ %.9g %.9g %.9g ]' %(round(v01[0],9), round(v01[1],9), round(v01[2],9)))
-    print('(1, 0) v10 [ %.9g %.9g %.9g ]' %(round(v10[0],9), round(v10[1],9), round(v10[2],9)))
-    print('(1, 1) v11 [ %.9g %.9g %.9g ]' %(round(v11[0],9), round(v11[1],9), round(v11[2],9)))
-
-    print("surface axes:",  d.get_detector_surface_axes(0), d.get_detector_surface_axes(1))
-
-    print(d.get_detector_surface_axes(0), "has", cbf.count_axis_ancestors(d.get_detector_surface_axes(0)), "ancestors")
-    print(d.get_detector_surface_axes(1), "has", cbf.count_axis_ancestors(d.get_detector_surface_axes(1)), "ancestors")
-
-    cur_axis = d.get_detector_surface_axes(0)
-    count = cbf.count_axis_ancestors(cur_axis)
-
-    for index in range(count):
-        print("axis", cur_axis, "index: ", index)
-        print("    equipment", cbf.get_axis_equipment(cur_axis))
-        print("    depends_on", cbf.get_axis_depends_on(cur_axis))
-        print("    equipment_component", cbf.get_axis_equipment_component(cur_axis))
-        vector = cbf.get_axis_vector(cur_axis)
-        print("    vector [ %.8g %.8g %.8g ]" % (round(vector[0],7), round(vector[1],7), round(vector[2],7)))
-        offset = cbf.get_axis_offset(cur_axis)
-        print("    offset [ %.8g %.8g %.8g ]" % (round(offset[0],7), round(offset[1],7), round(offset[2],7)))
-        print("    rotation", cbf.get_axis_rotation(cur_axis))
-        print("    rotation_axis", cbf.get_axis_rotation_axis(cur_axis))
-        cur_axis = cbf.get_axis_depends_on(cur_axis)
+with open(sys.argv[2],'w',newline='\n') as f:
+    for element in range(64):
+        d = cbf.construct_detector(element)
+        print("element:", element, file=f)
+
+        v00 = d.get_pixel_coordinates(0, 0)
+        v01 = d.get_pixel_coordinates(0, 1)
+        v10 = d.get_pixel_coordinates(1, 0)
+        v11 = d.get_pixel_coordinates(1, 1)
+        prec = Decimal('1.000000000')
+
+        print('(0, 0) v00 [ %.9f %.9f %.9f ]' %(round(v00[0],9), round(v00[1],9), round(v00[2],9)), file=f)
+        print('(0, 1) v01 [ %.9g %.9g %.9g ]' %(round(v01[0],9), round(v01[1],9), round(v01[2],9)), file=f)
+        print('(1, 0) v10 [ %.9g %.9g %.9g ]' %(round(v10[0],9), round(v10[1],9), round(v10[2],9)), file=f)
+        print('(1, 1) v11 [ %.9g %.9g %.9g ]' %(round(v11[0],9), round(v11[1],9), round(v11[2],9)), file=f)
+
+        print("surface axes:",  d.get_detector_surface_axes(0), d.get_detector_surface_axes(1), file=f)
+
+        print(d.get_detector_surface_axes(0), "has", cbf.count_axis_ancestors(d.get_detector_surface_axes(0)), "ancestors", file=f)
+        print(d.get_detector_surface_axes(1), "has", cbf.count_axis_ancestors(d.get_detector_surface_axes(1)), "ancestors", file=f)
+
+        cur_axis = d.get_detector_surface_axes(0)
+        count = cbf.count_axis_ancestors(cur_axis)
+
+        for index in range(count):
+            print("axis", cur_axis, "index: ", index, file=f)
+            print("    equipment", cbf.get_axis_equipment(cur_axis), file=f)
+            print("    depends_on", cbf.get_axis_depends_on(cur_axis), file=f)
+            print("    equipment_component", cbf.get_axis_equipment_component(cur_axis), file=f)
+            vector = cbf.get_axis_vector(cur_axis)
+            print("    vector [ %.8g %.8g %.8g ]" % (round(vector[0],7), round(vector[1],7), round(vector[2],7)), file=f)
+            offset = cbf.get_axis_offset(cur_axis)
+            print("    offset [ %.8g %.8g %.8g ]" % (round(offset[0],7), round(offset[1],7), round(offset[2],7)), file=f)
+            print("    rotation", cbf.get_axis_rotation(cur_axis), file=f)
+            print("    rotation_axis", cbf.get_axis_rotation_axis(cur_axis), file=f)
+            cur_axis = cbf.get_axis_depends_on(cur_axis)
